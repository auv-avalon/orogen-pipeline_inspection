name "pipeline_inspection"

using_library "opencv"
using_library "frame_helper"
using_library "pipeline_inspection"
using_library "offshore_pipeline_detector"

import_types_from 'base'
import_types_from "pipeline_inspectionTypes.hpp"
import_types_from "pipeline_inspection/DetectorTypes.hpp"
import_types_from "offshore_pipeline_detector/pipeline.h"


task_context "ColorFilter" do
###
#This task filters images on the green channel and return grayscale images
###

  input_port("frame_in", ro_ptr('base::samples::frame::Frame')).
    doc("Input image as RGB")
  
  output_port("frame_out", ro_ptr('base::samples::frame::Frame')).
    doc("Colorfiltered image, as grayscale")
    
  output_port("green_frame", ro_ptr('base::samples::frame::Frame'))
  
  output_port("diff_frame", ro_ptr('base::samples::frame::Frame'))
  
  property("green_threshold", "int", 125).
    doc("Colorthreshold, values beneath this will be set 0")
    
  property("diff_threshold", "int", 125)
  
  port_driven

end

task_context "Inspection" do
  needs_configuration

  input_port("laserSamples" , "base/samples/LaserScan").
    doc("Extracted laserscans, from the structuredLight task")
    
  input_port("laserPoints" , "std/vector<base/Vector3d>").
    doc("Laserscan as 3d points. Alternatve-port to laserSamples")
    
  input_port("laserPointCloud", "base/samples/Pointcloud")  
    
    
  input_port("pipeline", "controlData/Pipeline").
    doc("Pipelineinformation from the offshore_pipeline_detector")
  
  input_port("dead_reckoning", "base/samples/RigidBodyState").
    doc("Motion data of the vehicle")
  
  output_port("inspectionStatus", "pipeline_inspection/InspectionStatus")
  output_port("pipePoints", "base/samples/Pointcloud")
  output_port("debugFrame", ro_ptr('base::samples::frame::Frame')).
    doc("Debug-image of the pipePoints. This port need to be activated by the debug-property")
    
  output_port("pipeMap", "base/samples/Pointcloud")
  
  ######
  ## Calibration 
      
  property("laserPosition", "base/Vector3d").
    doc("Position of the linelaser in bodyframe")
    
  property("laserNorm", "base/Vector3d").
    doc("Normvector of the linelaserFrame")
    
  property("cameraPosition", "base/Vector3d").
    doc("Position of the camera in the body frame")
    
  property("cameraOrientation", "base/Quaterniond").
    doc("Orientation of the camera in the bodyframe")
    
  property("invert_z", "bool", false)
  
  property("laser_left_boundary", "double", 0.0).
    doc("Left laser boundary in percent")
    
  property("laser_right_boundary", "double", 0.0).
    doc("Right laser boundray in percent")
    
  property("max_pipe_angle", "double", 3.14).
    doc("Maximum pipe angle, at which the pipe_detector-status is used")
    
  property("min_pipe_confidence", "double", 0.4).
    doc("Minimum pipe confidence, at which the pipe_detector-status is used")
    
  
  property("buffer_size", "int", 10).
    doc("Size of the ringbuffer, containing the last n lasersamples")
    
  property("minimizer", "pipeline_inspection/min_algorithm").
    doc("Minimizer algorithm for pattern matching, refer to enu nlopt::algorithm")
    
  property("minimizer2", "pipeline_inspection/min_algorithm").
    doc("Second minimizer algorithm")
    
  property("use_second_minimizer", "bool", false)
  
  property("no_motion", "bool", false).
    doc("Build depth map with fake linear motion")
  
  property("use_velocity", "bool", false).
    doc("Use only velocity of the motion_samples to build the depth_map, ignore sample-position")
    
  property("relative_map", "bool", true).
    doc("Create a relative map, centered in the origin")
  
  
  ######
  ## Matcher parameter
  ######
  
  property("matcher_parameter_tolerance", "double", 0.0001).
    doc("tolerance, at which matcher stops")
  property("matcher_value_tolerance", "double", 0.0001)
  
  property("matcher_iterations", "int", 100)
  
  property("matcher_pipe_up", "bool", true)
  
  property("matcher_variance_threshold", "double", 1.0)
  
  #####
  ## Detection parameter
  #####
  
  #Output colors in rgb
  property("pipe_color", "base/Vector3d")
  property("ground_color", "base/Vector3d")
  property("underflooding_color", "base/Vector3d")
  property("overflooding_color", "base/Vector3d")
  property("z_offset", "double", 0.0)
  
  property("pipe_radius_h", "double", 0.15)
  property("pipe_radius_v", "double", 0.15)
  property("pipe_tolerance_h", "double", 0.1)
  property("pipe_tolerance_v", "double", 0.1)
  property("pipe_min_radius", "double", 0.2).
    doc("Radius the pipe must have to be detected as pipe")
  
  
  property("movement_factor", "double", 1.0).
    doc("Factor, which is multipliet to dead reckoning samples")

  
  property("debug", "bool", false).
    doc("Activate debug outputs")
  
  port_driven
  
end

task_context "LaserSimulation" do

  output_port("laserPoints" , "std/vector<base/Vector3d>")
  
  output_port("laserPointCloud", "base/samples/Pointcloud")
  
  output_port("vehiclePos", "base/samples/RigidBodyState")
  
  property("laserPosition", "base/Vector3d").
    doc("Position of the linelaser in bodyframe")
    
  property("laserNorm", "base/Vector3d").
    doc("Normvector of the linelaserFrame")
    
  property("cameraPosition", "base/Vector3d").
    doc("Position of the camera in the body frame")
    
  property("cameraOrientation", "base/Quaterniond").
    doc("Orientation of the camera in the bodyframe")
    
  property("variance", "double" , 0.01)
  
  property("line_height", "double", -1.0)
  
  property("line_length", "double", 1.0)
  
  property("pipe_height", "double", 0.1)
  
  property("pipe_width", "double", 0.2)
  
  property("vehicle_velocity", "base/Vector3d")

  periodic 0.1

end

